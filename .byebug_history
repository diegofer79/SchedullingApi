continue
e
next
doctor = Doctor.find(working_days_params[:doctor_id])
working_days_params[:doctor_id]
continue
JSON.parse(response.body)
continue
slots
appointments
continue
JSON.parse(response.body)
continue
date.wday
next
continue
JSON.parse(response.body)
continue
JSON.parse(response.body)
continue
next
continue
next
continue
date.wday
data.wday
next
continue
next
continue
slots
appointments
next
date
next
continue
date
appointments = doctor.appointments.where('start_date >= ?', date.beginning_of_day)
appointments = doctor.appointments.where('start_date >= ?', date.beginning_of_day).where('end_date <= ?', date.end_of_day)
appointments = doctor.appointments.where('start_date >= ?', date.beginning_of_day).where('end_date <= ?', date.end_of_day).map { |appointment| appointment.start_date.strftime("%H:%M") }
doctor.appointments
date.end_of_day
slots
appointments
next
slots
next
working_day
next
date.wday
next
continue
working_day
next
continue
e
next
continue
e
next
continue
params
param
    return match
    end 
        counter = counter + 1
        end
            end
                match = match + 1 if char == 1 && !['a','e','i','o','u','y'].includes?(source_arr[index])
                match = match + 1 if char == 0 && ['a','e','i','o','u','y'].includes?(source_arr[index])
            if char != " "
        n_patern_arr.each do |char, index|
        puts pattern
        n_patern_arr = n_patern.split("")
        n_patern = (" "*counter).concat(source)
    while counter <= length_s - length_p
    match = 0
    counter = 0
    length_s = source_arr.size
    length_p = pattern.split("").size
    source_arr = source.split("")
    pattern = "010"
    source = "amazing"
    #amazing
    #    010
    #amazing
    #010
def solution
continue
params
@model
continue
WorkingDay.with_deleted.all
continue
e
next
working_day[:id]
next
working_days_params[:doctor_id]
continue
result.size
result
resul
continue
result
continue
next
step
working_days_params.dig(:working_days).size
working_days_params.dig(:working_days).sie
continue
next
time_format_valid?(param[:end_working_hour])
time_format_valid?(param[:start_working_hour])
param[:start_working_hour]
continue
param
continue
param
param[:start_working_hour]
continue
params[:start_working_hour]
continue
params.permit(:working_days => [:id, :weekday, :start_working_hour, :end_working_hour])
params[:working_days].permit([[:id, :weekday, :start_working_hour, :end_working_hour]])
params["working_days"]
params.permit("working_days")
params
params.permit(:working_days)
parse_working_hours
params.permit(:working_days).permit([[:id, :weekday, :start_working_hour, :end_working_hour]])
continue
working_days_params
continue
working_days_params
params.fetch(:working_days).permit(array: [:id, :weekday, :start_working_hour, :end_working_hour])
params.fecth(:working_days).permit(array: [:id, :weekday, :start_working_hour, :end_working_hour])
params
working_days_params
continue
working_days_params
continue
next
continue
next
continue
params[:start_date]
time_format_valid?(params[:start_date])
continue
next
time_format_valid?(params[:start_date])
continue
e
next
continue
e
next
continue
next
continue
next
continue
(time.match? WORKING_HOURS_FORMAT) && (0..23).include?(hours) && (0..59).include?(minutes)
time.match? WORKING_HOURS_FORMAT && (0..23).include?(hours) && (0..59).include?(minutes)
time.match? WORKING_HOURS_FORMAT
time
hours, minutes = time.split(':').map(&:to_i)
time = params[:start_working_hour]
time_format_valid?(params[:start_working_hour])
params[:start_working_hour]
time_format_valid?(params[:start_working_hour])
continue
next
continue
(0..23).include?(hours)
!(0..23).include?(hours)
time
continue
time
continue
!(0..23).include?(hours)
next
time
continue
time
continue
(0..23).include?(hours)
start_working_hour.match? WORKING_HOURS_FORMAT
next
start_working_hour
continue
start_working_hour
continue
result
continue
e
next
continue
@model
continue
@model
continue
objects
objects.is_a?(ActiveRecord::Relation)
continue
@model.decorator_list
next
@model.decorator_list
continue
@model.decorator_list
continue
@model.decorator_list
next
@model.decorator_list
continue
@model.decorator_list
@model.decorator_list = %i[start_working_hour end_working_hour]
@model.decorator_list
next
@model.decorator_list
@model
continue
@model.decorator_list= %i[start_working_hour end_working_hour]
@model.decorator_list
@model.decorator_list= %i[start_working_hour end_working_hour]
continue
next
continue
object.decorator_list
continue
object.decorator_list
object
continue
objects.is_a?(ActiveRecord::Relation)
if objects.is_a?(ActiveRecord::Relation)
if objects.is_a?(Array)
objects
continue
Doctor.all
continue
Doctor.all
continue
@list
continue
@list
continue
@list
continue
@list
continue
@list
continue
@list
continue
Doctor.all
next
